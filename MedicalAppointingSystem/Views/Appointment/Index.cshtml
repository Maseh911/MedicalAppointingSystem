@model PaginatedList<MedicalAppointingSystem.Models.Appointment>    

@{
    ViewData["Title"] = "Index";
}

<h1>Appointment Times</h1>

<p>
    <a asp-action="Create">Create New</a>
</p>
<form asp-action="Index" method="get">
    <div class="form-actions no-color">
        <p>
            Find by name: <input type="text" name="SearchString" value="@ViewData["CurrentFilter"]" />      <!-- This will show the filtering searchbox, thus making it functional-->
            <input type="submit" value="Search" class="btn btn-default" /> |
            <a asp-action="Index">Back to Full List</a>
        </p>
    </div>
</form>
<table class="table">
    <thead>
        <tr>
            <th>
                <a asp-action="Index" asp-route-sortOrder="@ViewData["DateSortParm"]" asp-route-currentFilter="@ViewData["CurrentFilter"]">Date</a> <!-- This is used to hyperlink "Date" and add sorting to it-->
            </th>
            <th>
                <a asp-action="Index" asp-route-sortOrder="@ViewData["NameSortParm"]" asp-route-currentFilter="@ViewData["CurrentFilter"]">Patient</a> <!-- This is used to hyperlink the patient's first name and add sorting to it'-->
            </th>
            <th>
                Doctor
            </th>
            <th></th>
        </tr>
    </thead>
    <tbody>
@foreach (var item in Model) {
        <tr>
            <td>
                @Html.DisplayFor(modelItem => item.Date)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.Patient.FirstName)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.Doctor.FirstName)
            </td>
            <td>
                <a asp-action="Edit" asp-route-id="@item.AppointmentId">Edit</a> |
                <a asp-action="Details" asp-route-id="@item.AppointmentId">Details</a> |
                <a asp-action="Delete" asp-route-id="@item.AppointmentId">Delete</a>
            </td>
        </tr>
}
    </tbody>
</table>
@{      <!-- This is for the pagination for the appointment times page, it will display the previous and next page and will make it functional-->
    var prevDisabled = !Model.HasPreviousPage ? "disabled" : "";
    var nextDisabled = !Model.HasNextPage ? "disabled" : "";
}

<a asp-action="Index"                                       
   asp-route-sortOrder="@ViewData["CurrentSort"]"
   asp-route-pageNumber="@(Model.PageIndex - 1)"
   asp-route-currentFilter="@ViewData["CurrentFilter"]"
   class="btn btn-default @prevDisabled">
    Previous
</a>
<a asp-action="Index"
   asp-route-sortOrder="@ViewData["CurrentSort"]"
   asp-route-pageNumber="@(Model.PageIndex + 1)"
   asp-route-currentFilter="@ViewData["CurrentFilter"]"
   class="btn btn-default @nextDisabled">
    Next
</a>